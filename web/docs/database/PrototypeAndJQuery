jQuery gets a lot of its inspiration from the power behind the [http://prototype.conio.net Prototype] library. This is immeditately noticable with jQuery's use of the $() function, inspired by the Prototype function of the same name. However, there are some things that should be known about the Prototype and jQuery interact, and how the $() behaves differently.

=== Using Prototype and jQuery Together

To include both Javascript libraries, and have them work in unison, you will need to first include Prototype, then jQuery. For exmaple:

  <script src="prototype.js"></script>
  <script src="http://jquery.com/src/latest/"></script>

Loading jQuery first, then Prototype, will cause your code to break - as a reminder, jQuery throws an exception saying: "You are overwriting jQuery, please include jQuery last." (If you see this error, that's what it means)

=== Differences in $()

A side-by-side comparision of how the $() function works *ONLY WHEN PROTOTYPE IS USED* would be best to explain the differences. If you're not using Prototype, please refer to the [documentation http://jquery.com/docs/], instead.

  $("pre")

*Prototype:* Looks for the element with an ID of pre, if found, returns it, otherwise returns null.

*jQuery:* Looks for all elements with the tag name of pre.

* If none are found: It then looks for an element with an ID of pre, if one is found - it returns that element, if not, it returns a jQuery object, with an empty set of matched elements.
* If elements are found: jQuery returns a jQuery object, containing the all matched pre elements.

  $(DOMElement)

*Prototype:* Returns the !DOMElement.

*jQuery:* Attaches all of the jQuery object methods to the !DOMElement, then returns it. The result should still be usable by Prototype and jQuery. *Note:* See the bottom of the page for more information on this.

=== What to do about $()?

Because the behaviour of Prototype and jQuery is different, when it comes to the $() function, it is recommended that you do one of two things:

==== Un-ambiguous Selectors

Always be explicit when you search by a single ID. For example, use this:
  $("#pre")
and not this, which is ambiguous:
  $("pre")
Doing that will solve any problems straight away.

==== Prototype Short-hand

If you want to continuing using the Prototype short-hand, you must keep one rule in mind: Never name any of your !IDs the same as a DOM Element type, otherwise you will have strange results. For example:
  $("pre")
would work, if there were no pre elements in the page, but once one was added, your code would break. A better example is:
  $("body")
which will always break (since the body element is required).

*In a nutshell:* Either use smart un-ambiguous !IDs, or don't name your !IDs the same as element names.

=== Wrapping of DOM Elements

In order to support both Prototype and jQuery users at the same time, returned DOM elements have additional jQuery functions attached to them. It should be noted, however, that just because the original DOM Element is being returned, its original functions and properties should not be accessed directly, for example:

When using both Prototype and jQuery $("wrap") will return a modified DOM Element, so if you were inclined to do:

  $("wrap").style.display = 'none';

That would work, but only when using Prototype. If you then, later, stopped using Prototype, that code would break. To be safe, you should only use jQuery-sanctioned functions and terminology, for example:

  $("#wrap").hide();

would be the proper way of doing the above - it will always work, even if you are (or aren't) using Prototype.
